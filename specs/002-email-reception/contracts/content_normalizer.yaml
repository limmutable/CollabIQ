# API Contract: ContentNormalizer

version: "1.0.0"
feature: "002-email-reception"
component: "ContentNormalizer"
created: "2025-10-30"
status: "Design"

# Overview
# --------
# ContentNormalizer removes noise (signatures, quoted threads, disclaimers) from email
# body text to produce clean collaboration content ready for LLM entity extraction.
#
# Uses pattern-based text processing with Korean and English regex patterns.

# Requirements Coverage
# ---------------------
# FR-004: Detect and remove email signatures (Korean: "감사합니다", "드립니다"; English: "Best regards")
# FR-005: Detect and remove quoted thread content ("> " prefix, "On [date]" headers)
# FR-006: Detect and remove legal disclaimers and confidentiality notices
# FR-007: Preserve original collaboration content while removing noise
# FR-008: Output cleaned email text to file storage
# FR-012: Handle empty emails gracefully (flag for review)
# SC-002: Remove signatures from 95%+ of test emails
# SC-003: Remove quoted threads from 95%+ of test emails

---

# Interface

interface: ContentNormalizer
description: |
  Email text cleaning component that removes signatures, quoted threads, and disclaimers
  using pattern-based detection.

methods:
  # -------------------------------------------------------------------------
  # Method: clean
  # -------------------------------------------------------------------------
  - name: clean
    description: |
      Remove signatures, quoted threads, and disclaimers from email body text.
      This is the primary cleaning method.

    requirements:
      - FR-004  # Remove signatures
      - FR-005  # Remove quoted threads
      - FR-006  # Remove disclaimers
      - FR-007  # Preserve collaboration content
      - FR-012  # Handle empty emails

    input:
      parameters:
        - name: body
          type: str
          required: true
          description: |
            Raw email body text containing collaboration content mixed with
            signatures, quoted threads, and disclaimers.

        - name: remove_signatures
          type: bool
          required: false
          default: true
          description: Enable signature removal (FR-004)

        - name: remove_quotes
          type: bool
          required: false
          default: true
          description: Enable quoted thread removal (FR-005)

        - name: remove_disclaimers
          type: bool
          required: false
          default: true
          description: Enable disclaimer removal (FR-006)

    output:
      success:
        type: CleaningResult
        description: |
          Result object containing cleaned body text and removal metadata.

        fields:
          - name: cleaned_body
            type: str
            description: |
              Email body with signatures, quotes, and disclaimers removed.
              May be empty if entire email was noise (FR-012).

          - name: removed_content
            type: RemovedContent
            description: |
              Summary of what was removed (pattern names, character counts).

        example: |
          CleaningResult(
            cleaned_body="안녕하세요,\n\n지난주 회의에서 논의한 프로젝트 진행 상황을 공유드립니다.",
            removed_content=RemovedContent(
              signature_removed=True,
              quoted_thread_removed=False,
              disclaimer_removed=False,
              signature_pattern="korean_thanks_name",
              quote_pattern=None,
              disclaimer_pattern=None,
              original_length=156,
              cleaned_length=98
            )
          )

      errors:
        - code: VALIDATION_FAILED
          description: |
            Input body text failed validation (empty, wrong type, etc.)
          example: |
            ContentNormalizerError(
              code="VALIDATION_FAILED",
              message="Body text cannot be empty",
              input_length=0
            )

        - code: PATTERN_ERROR
          description: |
            Regex pattern compilation or matching failed (internal error)
          example: |
            ContentNormalizerError(
              code="PATTERN_ERROR",
              message="Failed to compile regex pattern 'korean_signature'",
              pattern_name="korean_signature"
            )

    side_effects:
      - None (pure function - no I/O, no logging, no state changes)

  # -------------------------------------------------------------------------
  # Method: remove_signature
  # -------------------------------------------------------------------------
  - name: remove_signature
    description: |
      Remove email signature from body text using Korean and English patterns.
      Uses multi-stage detection: exact patterns → heuristics → fallback.

    requirements:
      - FR-004  # Signature removal
      - SC-002  # 95%+ accuracy

    input:
      parameters:
        - name: body
          type: str
          required: true
          description: Email body text

    output:
      success:
        type: SignatureRemovalResult
        fields:
          - name: cleaned_body
            type: str
            description: Body with signature removed

          - name: signature_removed
            type: bool
            description: Whether signature was detected and removed

          - name: pattern_matched
            type: Optional[str]
            description: Name of pattern that matched (e.g., "korean_thanks_name")

          - name: signature_text
            type: Optional[str]
            description: The actual signature text that was removed (for debugging)

        example: |
          SignatureRemovalResult(
            cleaned_body="안녕하세요,\n\n프로젝트 진행 상황을 공유드립니다.",
            signature_removed=True,
            pattern_matched="korean_thanks_name",
            signature_text="\n\n감사합니다.\n김철수 드림"
          )

    patterns:
      korean_exact:
        - name: korean_thanks_name
          regex: |
            (?:감사(?:\s*드리며|\s*드립니다)?\.?|고맙습니다\.?)
            \s*
            (?:\n[가-힣]{2,5}\s+(?:드림|올림|드립니다|배상)\.?)?
          examples:
            - "감사합니다.\n김철수 드림"
            - "감사드립니다.\n이영희 올림"
            - "고맙습니다."

        - name: korean_greeting_signature
          regex: |
            (?:좋은\s+하루\s+보내세요|건강하세요|행복하세요)\.?
            \s*
            (?:\n[가-힣]{2,5}\s+(?:드림|올림))?
          examples:
            - "좋은 하루 보내세요.\n박민수 드림"
            - "건강하세요."

      english_exact:
        - name: english_formal_closing
          regex: |
            (?:Best\s+regards|Kind\s+regards|Sincerely|Regards|Thanks|Thank\s+you),?\s*
            (?:\n[A-Z][a-z]+\s+[A-Z][a-z]+)?
          examples:
            - "Best regards,\nJohn Smith"
            - "Thanks,\nJane Doe"
            - "Sincerely"

        - name: english_contact_block
          regex: |
            (?:--+|\n\n)  # Separator line or double newline
            [A-Z][a-z]+\s+[A-Z][a-z]+\s*  # Name
            (?:\n.*?(?:Tel|Phone|Email|Mobile):.*)?  # Contact info
            (?:\n.*?(?:Company|Organization):.*)?
          examples:
            - "--\nJohn Smith\nTel: +82-10-1234-5678"
            - "\n\nJane Doe\nEmail: jane@example.com"

      heuristics:
        - name: separator_line_signature
          description: |
            Detect signature after separator line (---, ___,  ===)
          regex: |
            \n(?:---+|___+|===+)\n.*$
          examples:
            - "\n---\nJohn Smith\nSoftware Engineer"

        - name: short_final_line
          description: |
            Detect signature as short final line with name pattern
          logic: |
            if last_line.length < 50 and contains_name_pattern:
                signature = last_line

  # -------------------------------------------------------------------------
  # Method: remove_quoted_thread
  # -------------------------------------------------------------------------
  - name: remove_quoted_thread
    description: |
      Remove quoted email thread content (previous conversation).
      Detects angle bracket quotes ("> ") and reply headers ("On [date], [person] wrote:").

    requirements:
      - FR-005  # Quote removal
      - SC-003  # 95%+ accuracy

    input:
      parameters:
        - name: body
          type: str
          required: true
          description: Email body text

    output:
      success:
        type: QuoteRemovalResult
        fields:
          - name: cleaned_body
            type: str
            description: Body with quoted thread removed

          - name: quoted_thread_removed
            type: bool
            description: Whether quoted thread was detected and removed

          - name: pattern_matched
            type: Optional[str]
            description: Name of pattern that matched

          - name: quoted_text
            type: Optional[str]
            description: The actual quoted text that was removed

        example: |
          QuoteRemovalResult(
            cleaned_body="Thanks for the update!",
            quoted_thread_removed=True,
            pattern_matched="angle_bracket_quotes",
            quoted_text="> On Oct 30, partner wrote:\n> Here is the project status..."
          )

    patterns:
      angle_bracket:
        - name: angle_bracket_quotes
          regex: |
            (?:^>.*$\n?)+  # One or more lines starting with ">"
          flags: MULTILINE
          examples:
            - "> On Oct 30, 2025, John Smith wrote:"
            - "> Here is the previous message"
            - "> > Nested quote level 2"

      reply_headers:
        - name: gmail_reply_header
          regex: |
            On\s+(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s+
            (?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2},?\s+\d{4}
            (?:\s+at\s+\d{1,2}:\d{2}\s*(?:AM|PM)?)?
            ,?\s+.*?wrote:\n
            .*$
          flags: MULTILINE | DOTALL
          examples:
            - "On Mon, Oct 30, 2025 at 2:35 PM, John Smith wrote:\nPrevious message..."
            - "On Oct 30, 2025, partner@example.com wrote:\n..."

        - name: outlook_reply_header
          regex: |
            From:\s+.*?\n
            Sent:\s+.*?\n
            To:\s+.*?\n
            Subject:\s+.*?\n
            .*$
          flags: MULTILINE | DOTALL
          examples:
            - |
              From: John Smith <john@example.com>
              Sent: Monday, October 30, 2025 2:35 PM
              To: partner@example.com
              Subject: RE: Project Update
              Previous message...

        - name: korean_reply_header
          regex: |
            (?:\d{4}년\s+\d{1,2}월\s+\d{1,2}일.*?에\s+.*?(?:쓴\s+글|작성):?\n)
            .*$
          flags: MULTILINE | DOTALL
          examples:
            - "2025년 10월 30일 오후 2시 35분에 김철수가 쓴 글:\n이전 메시지..."

  # -------------------------------------------------------------------------
  # Method: remove_disclaimer
  # -------------------------------------------------------------------------
  - name: remove_disclaimer
    description: |
      Remove legal disclaimers and confidentiality notices.

    requirements:
      - FR-006  # Disclaimer removal

    input:
      parameters:
        - name: body
          type: str
          required: true
          description: Email body text

    output:
      success:
        type: DisclaimerRemovalResult
        fields:
          - name: cleaned_body
            type: str

          - name: disclaimer_removed
            type: bool

          - name: pattern_matched
            type: Optional[str]

          - name: disclaimer_text
            type: Optional[str]

    patterns:
      confidentiality:
        - name: confidentiality_notice
          regex: |
            (?:CONFIDENTIAL|CONFIDENTIALITY\s+NOTICE|DISCLAIMER).*?
            (?:This\s+(?:e-?mail|message).*?(?:confidential|intended\s+only).*?)
            (?:\n\n|\Z)
          flags: IGNORECASE | DOTALL
          examples:
            - "CONFIDENTIALITY NOTICE: This email is intended only for..."
            - "DISCLAIMER: This message contains confidential information..."

      korean_disclaimer:
        - name: korean_confidentiality
          regex: |
            (?:본\s+메일|이\s+이메일).*?(?:기밀|비밀|수신자\s+외).*?
          flags: MULTILINE
          examples:
            - "본 메일은 기밀 정보를 포함하고 있으며 수신자 외에는..."

      footer_disclaimer:
        - name: email_footer_disclaimer
          regex: |
            (?:\n\n|\n---+\n)
            (?:Please\s+consider.*?before\s+printing|
               Think\s+green.*?|
               Virus-free.*?|
               Scanned\s+by.*?)
          flags: IGNORECASE | DOTALL

  # -------------------------------------------------------------------------
  # Method: save_cleaned_email
  # -------------------------------------------------------------------------
  - name: save_cleaned_email
    description: |
      Save CleanedEmail to file storage.
      Wrapper around CleaningResult that creates full CleanedEmail entity.

    requirements:
      - FR-008  # Output cleaned email text
      - FR-012  # Handle empty emails

    input:
      parameters:
        - name: original_message_id
          type: str
          required: true
          description: Message ID from original RawEmail

        - name: cleaning_result
          type: CleaningResult
          required: true
          description: Result from clean() method

    output:
      success:
        type: Path
        description: |
          Path to saved CleanedEmail JSON file.
        example: |
          Path("/Users/jlim/Projects/CollabIQ/data/cleaned/2025/10/20251030_143625_CABc123.json")

      errors:
        - code: STORAGE_FAILED
          description: Failed to write CleanedEmail to file storage

        - code: VALIDATION_FAILED
          description: CleanedEmail failed Pydantic validation

    side_effects:
      - Creates monthly directory if missing (data/cleaned/YYYY/MM/)
      - Writes CleanedEmail JSON file
      - Sets CleaningStatus.EMPTY if cleaned_body is empty (FR-012)

---

# Implementation Details

class_structure: |
  class ContentNormalizer:
      """Email text cleaning component."""

      def __init__(self):
          """Load regex patterns from patterns.py."""
          self.signature_patterns = load_signature_patterns()
          self.quote_patterns = load_quote_patterns()
          self.disclaimer_patterns = load_disclaimer_patterns()

      def clean(
          self,
          body: str,
          remove_signatures: bool = True,
          remove_quotes: bool = True,
          remove_disclaimers: bool = True
      ) -> CleaningResult:
          """
          Remove noise from email body.

          Process order (important for correctness):
          1. Remove disclaimers (usually at bottom)
          2. Remove quoted threads (can contain fake signatures)
          3. Remove signatures (should be last after quotes removed)
          """
          original_length = len(body)
          cleaned = body
          removed = RemovedContent(original_length=original_length)

          # Stage 1: Remove disclaimers
          if remove_disclaimers:
              result = self.remove_disclaimer(cleaned)
              cleaned = result.cleaned_body
              removed.disclaimer_removed = result.disclaimer_removed
              removed.disclaimer_pattern = result.pattern_matched

          # Stage 2: Remove quoted threads
          if remove_quotes:
              result = self.remove_quoted_thread(cleaned)
              cleaned = result.cleaned_body
              removed.quoted_thread_removed = result.quoted_thread_removed
              removed.quote_pattern = result.pattern_matched

          # Stage 3: Remove signatures
          if remove_signatures:
              result = self.remove_signature(cleaned)
              cleaned = result.cleaned_body
              removed.signature_removed = result.signature_removed
              removed.signature_pattern = result.pattern_matched

          removed.cleaned_length = len(cleaned)

          return CleaningResult(
              cleaned_body=cleaned.strip(),
              removed_content=removed
          )

pattern_loading: |
  # patterns.py

  import re
  from typing import List, Dict

  class Pattern:
      def __init__(self, name: str, regex: str, flags: int = 0):
          self.name = name
          self.pattern = re.compile(regex, flags)

      def search(self, text: str):
          return self.pattern.search(text)

      def sub(self, repl: str, text: str):
          return self.pattern.sub(repl, text)

  def load_signature_patterns() -> List[Pattern]:
      """Load signature detection patterns in priority order."""
      return [
          # Korean exact patterns (highest priority)
          Pattern(
              "korean_thanks_name",
              r'(?:감사(?:\s*드리며|\s*드립니다)?\.?|고맙습니다\.?)\s*(?:\n[가-힣]{2,5}\s+(?:드림|올림|드립니다|배상)\.?)?',
              re.MULTILINE | re.IGNORECASE
          ),
          # English exact patterns
          Pattern(
              "english_formal_closing",
              r'(?:Best\s+regards|Kind\s+regards|Sincerely|Regards|Thanks|Thank\s+you),?\s*(?:\n[A-Z][a-z]+\s+[A-Z][a-z]+)?',
              re.MULTILINE
          ),
          # Heuristic patterns (lowest priority)
          Pattern(
              "separator_line_signature",
              r'\n(?:---+|___+|===+)\n.*$',
              re.DOTALL
          ),
      ]

---

# Testing Contract

test_requirements:
  unit_tests:
    - test_clean_korean_signature:
        description: Verify Korean signature removal (SC-002)
        input: |
          안녕하세요,

          프로젝트 진행 상황을 공유드립니다.

          감사합니다.
          김철수 드림
        expected_output: |
          안녕하세요,

          프로젝트 진행 상황을 공유드립니다.
        assertions:
          - removed_content.signature_removed == True
          - removed_content.signature_pattern == "korean_thanks_name"
          - cleaned_body does not contain "감사합니다"
          - cleaned_body does not contain "김철수 드림"

    - test_clean_english_signature:
        description: Verify English signature removal (SC-002)
        input: |
          Hi,

          Here is the project update.

          Best regards,
          John Smith
        expected_output: |
          Hi,

          Here is the project update.
        assertions:
          - removed_content.signature_removed == True
          - removed_content.signature_pattern == "english_formal_closing"

    - test_clean_quoted_thread:
        description: Verify quoted thread removal (SC-003)
        input: |
          Thanks for the update!

          > On Oct 30, 2025, John Smith wrote:
          > Here is the previous message.
          > More quoted content.
        expected_output: |
          Thanks for the update!
        assertions:
          - removed_content.quoted_thread_removed == True
          - removed_content.quote_pattern == "angle_bracket_quotes"

    - test_clean_disclaimer:
        description: Verify disclaimer removal
        input: |
          Here is the message.

          CONFIDENTIALITY NOTICE: This email is intended only for the addressee.
        expected_output: |
          Here is the message.
        assertions:
          - removed_content.disclaimer_removed == True

    - test_clean_all_noise:
        description: Verify all noise types removed in one pass
        input: |
          안녕하세요,

          프로젝트 진행 상황입니다.

          > On Oct 29, partner wrote:
          > Previous message

          감사합니다.
          김철수 드림

          본 메일은 기밀 정보를 포함합니다.
        expected_output: |
          안녕하세요,

          프로젝트 진행 상황입니다.
        assertions:
          - removed_content.signature_removed == True
          - removed_content.quoted_thread_removed == True
          - removed_content.disclaimer_removed == True

    - test_clean_empty_result:
        description: Verify empty email edge case (FR-012)
        input: |
          감사합니다.
          김철수 드림
        expected_output: ""
        assertions:
          - cleaned_body == ""
          - removed_content.signature_removed == True
          - removed_content.original_length > 0
          - removed_content.cleaned_length == 0

    - test_clean_no_noise:
        description: Verify email with no noise is unchanged
        input: |
          프로젝트 진행 상황을 공유드립니다.
        expected_output: |
          프로젝트 진행 상황을 공유드립니다.
        assertions:
          - removed_content.signature_removed == False
          - removed_content.quoted_thread_removed == False
          - removed_content.disclaimer_removed == False

  integration_tests:
    - test_end_to_end_cleaning:
        description: Test full pipeline RawEmail → CleanedEmail
        steps:
          - Load RawEmail from data/raw/
          - Pass body to ContentNormalizer.clean()
          - Create CleanedEmail with result
          - Save to data/cleaned/
          - Verify cleaned file exists and contains valid CleanedEmail

  accuracy_tests:
    - test_signature_removal_accuracy:
        description: Validate SC-002 (95%+ signature removal accuracy)
        dataset: 100 test emails with Korean/English signatures
        target: 95% successfully removed
        methodology: |
          1. Manual curation of 100 emails with signatures
          2. Run ContentNormalizer.clean() on each
          3. Manual verification of cleaned output
          4. Count success rate: removed_count / total_count
          5. Assert success_rate >= 0.95

    - test_quote_removal_accuracy:
        description: Validate SC-003 (95%+ quote removal accuracy)
        dataset: 100 test emails with quoted threads
        target: 95% successfully removed

---

# Example Usage

example_basic:
  description: Basic email cleaning
  code: |
    from content_normalizer import ContentNormalizer
    from models.raw_email import RawEmail
    from models.cleaned_email import CleanedEmail, CleaningStatus

    # Load raw email
    raw_email = RawEmail.model_validate_json(raw_json)

    # Clean email
    normalizer = ContentNormalizer()
    result = normalizer.clean(
        body=raw_email.body,
        remove_signatures=True,
        remove_quotes=True,
        remove_disclaimers=True
    )

    # Create CleanedEmail
    cleaned_email = CleanedEmail(
        original_message_id=raw_email.metadata.message_id,
        cleaned_body=result.cleaned_body,
        removed_content=result.removed_content,
        status=CleaningStatus.SUCCESS if result.cleaned_body.strip() else CleaningStatus.EMPTY,
        is_empty=not bool(result.cleaned_body.strip())
    )

    # Save to file
    path = normalizer.save_cleaned_email(
        original_message_id=raw_email.metadata.message_id,
        cleaning_result=result
    )
    print(f"Cleaned email saved to: {path}")

example_selective_cleaning:
  description: Disable specific cleaning stages
  code: |
    normalizer = ContentNormalizer()

    # Only remove signatures, keep quotes and disclaimers
    result = normalizer.clean(
        body=email_body,
        remove_signatures=True,
        remove_quotes=False,  # Keep quoted threads
        remove_disclaimers=False  # Keep disclaimers
    )

example_debugging:
  description: Inspect what was removed
  code: |
    result = normalizer.clean(email_body)

    print(f"Original length: {result.removed_content.original_length}")
    print(f"Cleaned length: {result.removed_content.cleaned_length}")
    print(f"Removal %: {result.removed_content.removal_percentage:.1f}%")

    if result.removed_content.signature_removed:
        print(f"Signature pattern matched: {result.removed_content.signature_pattern}")

    if result.removed_content.quoted_thread_removed:
        print(f"Quote pattern matched: {result.removed_content.quote_pattern}")

---

# Performance Characteristics

time_complexity:
  clean: "O(n * p)"
    # n = body length, p = number of patterns
    # Each pattern does regex search/replace over body text
    # Worst case: ~30 patterns * 10KB body = ~300KB total processing

  remove_signature: "O(n)"
    # Single pass through body text with pattern matching
    # Early exit on first match (patterns ordered by priority)

  remove_quoted_thread: "O(n)"
    # Single pass with multiline regex

  remove_disclaimer: "O(n)"
    # Single pass with multiline regex

space_complexity:
  clean: "O(n)"
    # Creates cleaned copy of body text
    # Original body remains unchanged (immutable operation)

performance_targets:
  single_email: "< 100ms"  # Clean one email body
  batch_50_emails: "< 5 seconds"  # Clean 50 emails (SC-006: 10 min total including fetch)

optimization_strategies:
  - Compile regex patterns once at initialization (not per-email)
  - Order patterns by match frequency (common patterns first for early exit)
  - Use non-capturing groups (?:...) to reduce regex overhead
  - Limit backtracking with possessive quantifiers where possible

---

# Contract Compliance

requirements_coverage:
  FR-004: ✅ remove_signature() with Korean and English patterns
  FR-005: ✅ remove_quoted_thread() with angle bracket and reply header patterns
  FR-006: ✅ remove_disclaimer() with confidentiality notice patterns
  FR-007: ✅ clean() preserves collaboration content (removes only matched patterns)
  FR-008: ✅ save_cleaned_email() outputs to file storage
  FR-012: ✅ CleaningStatus.EMPTY for emails with no content after cleaning
  SC-002: ✅ 95%+ signature removal accuracy (validated by test_signature_removal_accuracy)
  SC-003: ✅ 95%+ quote removal accuracy (validated by test_quote_removal_accuracy)

edge_cases_handled:
  - Empty email after cleaning: Returns CleaningStatus.EMPTY (FR-012)
  - No noise detected: Returns original body unchanged
  - Mixed Korean/English content: Applies both pattern sets
  - Nested quoted threads: Regex handles multiple levels
  - Non-standard signatures: Heuristic patterns provide fallback
  - Multiple signatures in one email: Removes all matches

---

**Document Status**: Complete - Ready for implementation
