# API Contract: InfisicalClient

version: 1.0.0
date: 2025-11-01
feature: 003-infisical-secrets
status: Design Complete

description: |
  Wrapper around Infisical Python SDK (infisicalsdk) providing caching, error handling,
  and fallback mechanisms for secure secret retrieval. This contract defines the interface
  for the InfisicalClient class that integrates with CollabIQ's Pydantic settings.

---

# InfisicalClient Class

## Initialization

```python
InfisicalClient(config: InfisicalConfig)
```

### Parameters

- **config** (InfisicalConfig): Configuration object containing Infisical credentials and settings
  - `config.enabled` (bool): Whether Infisical integration is active
  - `config.host` (str): Infisical API endpoint (default: https://app.infisical.com)
  - `config.project_id` (str): Infisical project identifier
  - `config.environment_slug` (str): Environment name (dev/staging/prod)
  - `config.client_id` (str): Universal Auth machine identity client ID
  - `config.client_secret` (str): Universal Auth machine identity client secret
  - `config.cache_ttl` (int): Cache TTL in seconds (default: 60, range: 0-3600)

### Raises

- **InfisicalAuthError**: Invalid client_id/client_secret or authentication failure
  - Message: "Authentication failed: Invalid client ID or secret"
  - Recovery: Check INFISICAL_CLIENT_ID and INFISICAL_CLIENT_SECRET environment variables

- **InfisicalConnectionError**: Cannot reach Infisical host
  - Message: "Cannot connect to Infisical at {host}"
  - Recovery: Check network connectivity, verify host URL

- **ValueError**: Invalid configuration (e.g., enabled=True but missing required fields)
  - Message: "InfisicalConfig validation failed: {field} is required when enabled=True"
  - Recovery: Set all required environment variables

### Behavior

1. Validate config parameters (raise ValueError if invalid)
2. Initialize underlying InfisicalSDKClient with provided configuration
3. Authenticate via Universal Auth using client_id/client_secret
4. Initialize empty SecretCache with specified TTL
5. Set _authenticated flag to True on successful login

### Post-Conditions

- Client is authenticated and ready to fetch secrets
- Cache is initialized (empty, but ready to populate)
- All subsequent get_secret() calls will use this authenticated session

---

## Methods

### get_secret(secret_name: str) -> SecretValue

Retrieve a single secret with three-tier fallback: Infisical API → SDK cache → .env file.

#### Parameters

- **secret_name** (str): Name of the secret to retrieve (e.g., "GMAIL_API_KEY")
  - Must match pattern: [A-Z][A-Z0-9_]*
  - Case-sensitive

#### Returns

- **SecretValue**: Object containing secret value and metadata
  - `key` (str): Secret name (same as input secret_name)
  - `value` (str): Secret value (never logged)
  - `environment` (str): Environment where secret was retrieved
  - `source` (str): One of "infisical", "cache", "env_file"
  - `is_cached` (bool): True if value came from cache
  - `retrieved_at` (datetime): UTC timestamp of retrieval

#### Raises

- **SecretNotFoundError**: Secret not found in Infisical, SDK cache, or .env file
  - Message: "Secret {secret_name} not found in Infisical or .env. Please add to Infisical project '{project_id}' environment '{environment}' or set in .env file."
  - Recovery: Add secret to Infisical or set {secret_name} in .env

- **InfisicalCacheMissError**: Cache expired and API unreachable (rare, usually returns stale cache)
  - Message: "Cache expired for {secret_name} and Infisical API unreachable"
  - Recovery: Restore network connectivity or use .env fallback

#### Behavior

1. **Check SDK built-in cache** (if not expired per cache_ttl)
   - If cache hit: Return SecretValue(source="cache", is_cached=True)
   - Log: INFO "Retrieved {secret_name} from cache"

2. **Fetch from Infisical API** (if cache miss or expired)
   - Call `self._sdk_client.secrets.get_secret_by_name(secret_name, project_id, environment_slug)`
   - If successful: Update cache, return SecretValue(source="infisical", is_cached=False)
   - Log: INFO "Retrieved {secret_name} from Infisical API"

3. **Fall back to .env file** (if API call fails)
   - Call `os.getenv(secret_name)`
   - If found: Return SecretValue(source="env_file", is_cached=False)
   - If not found: Raise SecretNotFoundError
   - Log: WARNING "Retrieved {secret_name} from .env (Infisical unavailable)"

4. **Never log secret values** (FR-007 requirement)
   - Log only secret names, sources, and status
   - Sensitive values never appear in logs

#### Performance

- **Cache hit**: <10ms (in-memory lookup)
- **API call**: 100-300ms (network latency)
- **Fallback to .env**: <1ms (environment variable lookup)

#### Examples

```python
# Success case (from Infisical API)
secret = client.get_secret("GMAIL_API_KEY")
assert secret.value == "ya29.a0AfH6SMB..."
assert secret.source == "infisical"
assert secret.is_cached == False

# Cache hit case
secret = client.get_secret("GMAIL_API_KEY")  # Called again within TTL
assert secret.source == "cache"
assert secret.is_cached == True

# Fallback case (Infisical unavailable)
secret = client.get_secret("GMAIL_API_KEY")
assert secret.source == "env_file"
assert secret.is_cached == False
```

---

### get_all_secrets() -> dict[str, str]

Fetch all secrets for the configured project and environment in a single API call.

#### Parameters

None

#### Returns

- **dict[str, str]**: Key-value pairs of all secrets in the environment
  - Keys: Secret names (e.g., "GMAIL_API_KEY")
  - Values: Secret values (never logged)
  - Empty dict if no secrets found

#### Raises

- **InfisicalConnectionError**: Cannot connect to Infisical API
  - Message: "Failed to fetch all secrets: {error_details}"
  - Recovery: Check network, verify credentials

#### Behavior

1. Call `self._sdk_client.secrets.list_secrets(project_id, environment_slug, secret_path="/")`
2. Parse response into dict[str, str]
3. Update cache with all retrieved secrets
4. Set cache last_updated timestamp to now
5. Return dictionary

#### Performance

- **API call**: 200-500ms (fetches multiple secrets in one request)
- **More efficient than multiple get_secret() calls** when fetching 3+ secrets

#### Examples

```python
secrets = client.get_all_secrets()
# {
#   "GMAIL_API_KEY": "ya29.a0AfH6SMB...",
#   "GEMINI_API_KEY": "AIzaSyD...",
#   "NOTION_API_KEY": "secret_ntn..."
# }
```

---

### refresh_cache() -> None

Force cache refresh regardless of TTL expiration.

#### Parameters

None

#### Returns

None

#### Raises

- **InfisicalConnectionError**: Cannot refresh cache due to API failure
  - Message: "Failed to refresh cache: {error_details}"
  - Recovery: Check network, verify API status

#### Behavior

1. Call `get_all_secrets()` to fetch fresh values
2. Replace entire cache contents
3. Update last_updated timestamp
4. Log: INFO "Cache refreshed: {count} secrets updated"

#### Use Cases

- Manual refresh after secret rotation in Infisical
- Testing connectivity after Infisical outage resolved
- Debugging stale cache issues

#### Examples

```python
# Force refresh (ignores TTL)
client.refresh_cache()  # Fetches all secrets immediately
```

---

### is_connected() -> bool

Test connectivity to Infisical API without modifying cache.

#### Parameters

None

#### Returns

- **bool**: True if Infisical API reachable, False otherwise

#### Raises

None (catches all exceptions internally)

#### Behavior

1. Attempt lightweight API call (e.g., list_secrets with limit=1)
2. If successful: Return True
3. If any error: Return False
4. Log result: INFO "Infisical connectivity check: {result}"

#### Performance

- **Network call**: 50-200ms (minimal API request)

#### Use Cases

- Health checks in monitoring systems
- CLI verify command (collabiq verify-infisical)
- Pre-deployment validation scripts

#### Examples

```python
if client.is_connected():
    print("✅ Infisical API reachable")
else:
    print("❌ Infisical API unreachable")
```

---

## Error Types

### InfisicalAuthError (extends Exception)

**When Raised**: Invalid client_id/client_secret during authentication

**Attributes**:
- `message` (str): Human-readable error description
- `client_id` (str): Client ID that failed (for debugging)

**Recovery Actions**:
1. Verify INFISICAL_CLIENT_ID environment variable is set correctly
2. Verify INFISICAL_CLIENT_SECRET environment variable is set correctly
3. Check Infisical dashboard for machine identity status (active/revoked)

---

### InfisicalConnectionError (extends Exception)

**When Raised**: Network failure connecting to Infisical host

**Attributes**:
- `message` (str): Human-readable error description
- `host` (str): Host that was unreachable

**Recovery Actions**:
1. Check network connectivity (ping infisical.com)
2. Verify INFISICAL_HOST URL is correct
3. Check firewall/proxy settings
4. Use .env fallback as temporary workaround

---

### SecretNotFoundError (extends Exception)

**When Raised**: Secret not found in Infisical, cache, or .env

**Attributes**:
- `message` (str): Human-readable error description
- `secret_name` (str): Name of missing secret
- `project_id` (str): Project where secret was searched
- `environment` (str): Environment where secret was searched

**Recovery Actions**:
1. Add secret to Infisical via dashboard
2. Set {secret_name} in .env file as temporary fallback
3. Verify secret name spelling (case-sensitive)

---

### InfisicalCacheMissError (extends Exception)

**When Raised**: Cache expired and API unreachable (rare)

**Attributes**:
- `message` (str): Human-readable error description
- `secret_name` (str): Secret that caused cache miss

**Recovery Actions**:
1. Restore network connectivity to Infisical
2. Use .env fallback as temporary workaround
3. Wait for cache TTL to expire, then retry

---

## Logging Contract

All log messages MUST follow this format:

### INFO Level

- Secret retrieval success: `"Retrieved {secret_name} from {source}"`
  - Example: "Retrieved GMAIL_API_KEY from infisical"
- Cache hit: `"Retrieved {secret_name} from cache (age: {age}s)"`
- Connectivity check: `"Infisical connectivity check: {'success' if connected else 'failed'}"`
- Cache refresh: `"Cache refreshed: {count} secrets updated"`

### WARNING Level

- Fallback to .env: `"Retrieved {secret_name} from .env (Infisical unavailable)"`
- Stale cache used: `"Using stale cached value for {secret_name} (expired {age}s ago)"`

### ERROR Level

- Authentication failure: `"Infisical authentication failed: {error_message}"`
- Secret not found: `"Secret {secret_name} not found in Infisical or .env"`

### CRITICAL Level

- Startup failure: `"Cannot initialize Infisical client: {error_message}. Application cannot start."`

### NEVER Logged

- Secret values (NEVER log: `"GMAIL_API_KEY=ya29..."`)
- Client secrets (NEVER log: `"client_secret=abc123..."`)
- Full stack traces containing secret values

---

## Testing Contract

### Unit Tests (Mock Infisical SDK)

- Test cache hit/miss scenarios
- Test all error types (auth failure, connection error, not found)
- Test fallback to .env file
- Test cache refresh logic
- Mock `InfisicalSDKClient` responses

### Integration Tests (Real Infisical API)

- Mark with `@pytest.mark.integration`
- Require test Infisical account credentials
- Test full authentication flow
- Test real secret retrieval
- Test environment isolation (dev != prod)

### Contract Tests

- Verify method signatures match this specification
- Verify exception types are correct
- Verify return types match specification
- Verify logging messages follow format

---

## Version History

| Version | Date | Changes |
|---------|------|---------|
| 1.0.0 | 2025-11-01 | Initial contract specification |

---

## Related Documents

- [spec.md](../spec.md) - Feature specification with user stories
- [data-model.md](../data-model.md) - Entity definitions and relationships
- [research.md](../research.md) - Technical research and decisions
- [quickstart.md](../quickstart.md) - Usage instructions and examples
